
Micromouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000f04  00000f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800106  00800106  00000f9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094b  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000470  00000000  00000000  00001a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000458  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  000022ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c2  00000000  00000000  00002955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a6 e0       	ldi	r26, 0x06	; 6
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 32       	cpi	r26, 0x29	; 41
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e4 e0       	ldi	r30, 0x04	; 4
  8c:	ff e0       	ldi	r31, 0x0F	; 15
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 99 03 	call	0x732	; 0x732 <main>
  9e:	0c 94 80 07 	jmp	0xf00	; 0xf00 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:
*/


//Init the I2C/TWI COM
void I2C_Init(uint8_t addr,uint8_t sizeBuff, uint8_t (*func)(uint8_t*,uint8_t,uint8_t*))
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	c8 2f       	mov	r28, r24
  b0:	d6 2f       	mov	r29, r22
	callBack = func;
  b2:	50 93 22 01 	sts	0x0122, r21
  b6:	40 93 21 01 	sts	0x0121, r20
	recv_buff = calloc(sizeBuff,sizeof(*recv_buff));
  ba:	06 2f       	mov	r16, r22
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	c8 01       	movw	r24, r16
  c4:	0e 94 30 06 	call	0xc60	; 0xc60 <calloc>
  c8:	90 93 20 01 	sts	0x0120, r25
  cc:	80 93 1f 01 	sts	0x011F, r24
	tran_buff = calloc(sizeBuff,sizeof(*tran_buff));
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 30 06 	call	0xc60	; 0xc60 <calloc>
  da:	90 93 24 01 	sts	0x0124, r25
  de:	80 93 23 01 	sts	0x0123, r24
	max_size_buff = sizeBuff;
  e2:	d0 93 06 01 	sts	0x0106, r29
	
	TWAR = addr<<1;//Set the slave address
  e6:	cc 0f       	add	r28, r28
  e8:	c0 93 ba 00 	sts	0x00BA, r28
		-TWEN Enable TWI
		-TWEA Enable the send of ACK bytes when receive addr, general call or data bytes
		-TWIE Enable interrupt request, request are made when TWINT is set to 1 (sei() must be enable for this)
		-TWINT Set an TWI interrupt to mean the init is done ?
	*/
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWEN); 
  ec:	85 e4       	ldi	r24, 0x45	; 69
  ee:	80 93 bc 00 	sts	0x00BC, r24
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret

000000fc <__vector_24>:
	TWCR &= ~((1<<TWIE) | (1<<TWEA) | (1<<TWEN) );
}


//Occurred when TWI Interrupt meaning software has to process data. TWINT must be set to 1 for TWI operation continue
ISR(TWI_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	switch(TW_STATUS){	
 11e:	80 91 b9 00 	lds	r24, 0x00B9
 122:	88 7f       	andi	r24, 0xF8	; 248
 124:	80 38       	cpi	r24, 0x80	; 128
 126:	e1 f0       	breq	.+56     	; 0x160 <__vector_24+0x64>
 128:	38 f4       	brcc	.+14     	; 0x138 <__vector_24+0x3c>
 12a:	80 36       	cpi	r24, 0x60	; 96
 12c:	99 f0       	breq	.+38     	; 0x154 <__vector_24+0x58>
 12e:	88 36       	cpi	r24, 0x68	; 104
 130:	99 f1       	breq	.+102    	; 0x198 <__vector_24+0x9c>
 132:	81 11       	cpse	r24, r1
 134:	93 c0       	rjmp	.+294    	; 0x25c <__vector_24+0x160>
 136:	8f c0       	rjmp	.+286    	; 0x256 <__vector_24+0x15a>
 138:	88 3a       	cpi	r24, 0xA8	; 168
 13a:	09 f4       	brne	.+2      	; 0x13e <__vector_24+0x42>
 13c:	46 c0       	rjmp	.+140    	; 0x1ca <__vector_24+0xce>
 13e:	18 f4       	brcc	.+6      	; 0x146 <__vector_24+0x4a>
 140:	80 3a       	cpi	r24, 0xA0	; 160
 142:	71 f1       	breq	.+92     	; 0x1a0 <__vector_24+0xa4>
 144:	8b c0       	rjmp	.+278    	; 0x25c <__vector_24+0x160>
 146:	88 3b       	cpi	r24, 0xB8	; 184
 148:	09 f4       	brne	.+2      	; 0x14c <__vector_24+0x50>
 14a:	57 c0       	rjmp	.+174    	; 0x1fa <__vector_24+0xfe>
 14c:	80 3c       	cpi	r24, 0xC0	; 192
 14e:	09 f4       	brne	.+2      	; 0x152 <__vector_24+0x56>
 150:	7c c0       	rjmp	.+248    	; 0x24a <__vector_24+0x14e>
 152:	84 c0       	rjmp	.+264    	; 0x25c <__vector_24+0x160>
		
		//--------------Slave as Receiver--------------------
		case 0x60://SLave addr and W has been received
			TWACK; //Send a ACK bit to mean it's ready to receive byte
 154:	85 ec       	ldi	r24, 0xC5	; 197
 156:	80 93 bc 00 	sts	0x00BC, r24
			r_index = 0; //Set receive data buffer index
 15a:	10 92 0a 01 	sts	0x010A, r1
			break;
 15e:	7e c0       	rjmp	.+252    	; 0x25c <__vector_24+0x160>
		
		case 0x80:  //a byte was received, store it and setup the buffer to receive another
			recv_buff[r_index] = TWDR;
 160:	80 91 bb 00 	lds	r24, 0x00BB
 164:	90 91 0a 01 	lds	r25, 0x010A
 168:	e0 91 1f 01 	lds	r30, 0x011F
 16c:	f0 91 20 01 	lds	r31, 0x0120
 170:	e9 0f       	add	r30, r25
 172:	f1 1d       	adc	r31, r1
 174:	80 83       	st	Z, r24
			r_index++;
 176:	80 91 0a 01 	lds	r24, 0x010A
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 0a 01 	sts	0x010A, r24
			if(r_index < max_size_buff) TWACK;
 180:	90 91 06 01 	lds	r25, 0x0106
 184:	89 17       	cp	r24, r25
 186:	20 f4       	brcc	.+8      	; 0x190 <__vector_24+0x94>
 188:	85 ec       	ldi	r24, 0xC5	; 197
 18a:	80 93 bc 00 	sts	0x00BC, r24
 18e:	66 c0       	rjmp	.+204    	; 0x25c <__vector_24+0x160>
			else TWNACK;
 190:	85 e8       	ldi	r24, 0x85	; 133
 192:	80 93 bc 00 	sts	0x00BC, r24
 196:	62 c0       	rjmp	.+196    	; 0x25c <__vector_24+0x160>
			
			break;	
			
		case 0x68://adressed as slave while in master mode should never happen, better reset; Je n'ai pas vraiment compris...
			reset = 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 08 01 	sts	0x0108, r24
			break;
 19e:	5e c0       	rjmp	.+188    	; 0x25c <__vector_24+0x160>
		case 0x88://Previously addressed with SLA+W, data has been received and NACK has been returned
			break;
					
		case 0xA0: //Stop or rep start, reset state machine
			//Callback information receive
			transmit_size = (*callBack)(recv_buff,r_index,tran_buff);
 1a0:	40 91 23 01 	lds	r20, 0x0123
 1a4:	50 91 24 01 	lds	r21, 0x0124
 1a8:	e0 91 21 01 	lds	r30, 0x0121
 1ac:	f0 91 22 01 	lds	r31, 0x0122
 1b0:	60 91 0a 01 	lds	r22, 0x010A
 1b4:	80 91 1f 01 	lds	r24, 0x011F
 1b8:	90 91 20 01 	lds	r25, 0x0120
 1bc:	09 95       	icall
 1be:	80 93 07 01 	sts	0x0107, r24
			TWACK;
 1c2:	85 ec       	ldi	r24, 0xC5	; 197
 1c4:	80 93 bc 00 	sts	0x00BC, r24
			break;
 1c8:	49 c0       	rjmp	.+146    	; 0x25c <__vector_24+0x160>
		//--------------Slave as Transmitter--------------------
		case 0xA8:  //SLA+R received, prep for transmission and load first data
			if(transmit_size){
 1ca:	80 91 07 01 	lds	r24, 0x0107
 1ce:	88 23       	and	r24, r24
 1d0:	71 f0       	breq	.+28     	; 0x1ee <__vector_24+0xf2>
				t_index=1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 09 01 	sts	0x0109, r24
				TWDR = tran_buff[0];
 1d8:	e0 91 23 01 	lds	r30, 0x0123
 1dc:	f0 91 24 01 	lds	r31, 0x0124
 1e0:	80 81       	ld	r24, Z
 1e2:	80 93 bb 00 	sts	0x00BB, r24
				TWACK;
 1e6:	85 ec       	ldi	r24, 0xC5	; 197
 1e8:	80 93 bc 00 	sts	0x00BC, r24
 1ec:	37 c0       	rjmp	.+110    	; 0x25c <__vector_24+0x160>
			}
			else{
				TWDR = 0x00;
 1ee:	10 92 bb 00 	sts	0x00BB, r1
				TWNACK;
 1f2:	85 e8       	ldi	r24, 0x85	; 133
 1f4:	80 93 bc 00 	sts	0x00BC, r24
 1f8:	31 c0       	rjmp	.+98     	; 0x25c <__vector_24+0x160>
			}
			break;
		
		case 0xB8:  //data transmitted and ACK received from master, send next byte
			if(!transmit_size){
 1fa:	80 91 07 01 	lds	r24, 0x0107
 1fe:	81 11       	cpse	r24, r1
 200:	06 c0       	rjmp	.+12     	; 0x20e <__vector_24+0x112>
				TWDR = 0x00;
 202:	10 92 bb 00 	sts	0x00BB, r1
				TWNACK;
 206:	85 e8       	ldi	r24, 0x85	; 133
 208:	80 93 bc 00 	sts	0x00BC, r24
 20c:	27 c0       	rjmp	.+78     	; 0x25c <__vector_24+0x160>
			}
			else{
				TWDR = tran_buff[t_index];
 20e:	80 91 09 01 	lds	r24, 0x0109
 212:	e0 91 23 01 	lds	r30, 0x0123
 216:	f0 91 24 01 	lds	r31, 0x0124
 21a:	e8 0f       	add	r30, r24
 21c:	f1 1d       	adc	r31, r1
 21e:	80 81       	ld	r24, Z
 220:	80 93 bb 00 	sts	0x00BB, r24
				t_index++;
 224:	80 91 09 01 	lds	r24, 0x0109
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 09 01 	sts	0x0109, r24
				if(t_index >= transmit_size){ //If it's the last byte, send NACK to say the end
 22e:	90 91 07 01 	lds	r25, 0x0107
 232:	89 17       	cp	r24, r25
 234:	30 f0       	brcs	.+12     	; 0x242 <__vector_24+0x146>
					TWNACK;
 236:	85 e8       	ldi	r24, 0x85	; 133
 238:	80 93 bc 00 	sts	0x00BC, r24
					transmit_size = 0;
 23c:	10 92 07 01 	sts	0x0107, r1
 240:	0d c0       	rjmp	.+26     	; 0x25c <__vector_24+0x160>
				}
				else TWACK;
 242:	85 ec       	ldi	r24, 0xC5	; 197
 244:	80 93 bc 00 	sts	0x00BC, r24
 248:	09 c0       	rjmp	.+18     	; 0x25c <__vector_24+0x160>
			//last bytes should not be acked, ignore till start/stop
			//reset=1;
			break;
		
		case 0xC0: //byte send and NACK receive from Master, meaning he doesn't expect more byte
			TWACK;
 24a:	85 ec       	ldi	r24, 0xC5	; 197
 24c:	80 93 bc 00 	sts	0x00BC, r24
			transmit_size = 0;
 250:	10 92 07 01 	sts	0x0107, r1
			break;
 254:	03 c0       	rjmp	.+6      	; 0x25c <__vector_24+0x160>
		
		//--------------------- bus error---------------------------------
		//illegal start or stop received, reset the I2C hardware
		case 0x00:
			TWRESET;
 256:	85 ed       	ldi	r24, 0xD5	; 213
 258:	80 93 bc 00 	sts	0x00BC, r24
			break;
	}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <PWM_Init>:
uint8_t porthistory = 0;

void PWM_Init(uint16_t PWM_top)
{
	//Set the PWM Pin as Output
	SET(DDRB,PORTB1);
 27e:	21 9a       	sbi	0x04, 1	; 4
	SET(DDRB,PORTB2);
 280:	22 9a       	sbi	0x04, 2	; 4
	
	//Init duty_ycle to 0
	OCR1A = 0;
 282:	10 92 89 00 	sts	0x0089, r1
 286:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 28a:	10 92 8b 00 	sts	0x008B, r1
 28e:	10 92 8a 00 	sts	0x008A, r1
	
	//Set TOP Value
	ICR1 = PWM_top; // PWM Frequency = F_CPU/(2*ICR1)
 292:	90 93 87 00 	sts	0x0087, r25
 296:	80 93 86 00 	sts	0x0086, r24
	
	//Set the mode of operation
	//COM1X1 -> Non Inverted Mode
	//WGM13 set Phase and Frequency corrected mode, with top value on 16bit register ICR1 (define PWM frequency)
	//CS10 No clock prescaler
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
 29a:	e0 e8       	ldi	r30, 0x80	; 128
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	80 6a       	ori	r24, 0xA0	; 160
 2a2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << CS10);
 2a4:	e1 e8       	ldi	r30, 0x81	; 129
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	81 61       	ori	r24, 0x11	; 17
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret

000002b0 <Counter_INIT>:
}

void Counter_INIT()
{
	//Setup 4 interrupt pin
	SET(DDRD,PORTD4|PORTD5|PORTD6|PORTD7); //Set as Input the 4 pin
 2b0:	8a b1       	in	r24, 0x0a	; 10
 2b2:	87 61       	ori	r24, 0x17	; 23
 2b4:	8a b9       	out	0x0a, r24	; 10
	//SET(PORTD,PORTD4|PORTD5|PORTD6|PORTD7);
	
	SET(PCICR,PCIE2);   //Setup Scan interrupt on pin PORTD [16-23] (PCIE1 PORTC: 8-14 et PCIE2 PORTD 16-23)
 2b6:	e8 e6       	ldi	r30, 0x68	; 104
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	80 83       	st	Z, r24
	SET(PCMSK2,PCINT21|PCINT22|PCINT20|PCINT23);     // Turns on PCINTx interrupt
 2c0:	ed e6       	ldi	r30, 0x6D	; 109
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	87 62       	ori	r24, 0x27	; 39
 2c8:	80 83       	st	Z, r24
	
	//TIMER2 will update frequency value each X ms;
	TCNT2 = TIMER2_T;
 2ca:	80 ea       	ldi	r24, 0xA0	; 160
 2cc:	80 93 b2 00 	sts	0x00B2, r24
	TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20); //Select system clock with 1024 prescaler
 2d0:	e1 eb       	ldi	r30, 0xB1	; 177
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	87 60       	ori	r24, 0x07	; 7
 2d8:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //Overflow interrupt enable
 2da:	e0 e7       	ldi	r30, 0x70	; 112
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	80 83       	st	Z, r24
 2e4:	08 95       	ret

000002e6 <__vector_5>:
}

ISR(PCINT2_vect){
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	cf 93       	push	r28
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	uint8_t changedbits = PIND ^ porthistory;
 30a:	c9 b1       	in	r28, 0x09	; 9
 30c:	80 91 0b 01 	lds	r24, 0x010B
 310:	c8 27       	eor	r28, r24
	porthistory = PIND;
 312:	89 b1       	in	r24, 0x09	; 9
 314:	80 93 0b 01 	sts	0x010B, r24
	
	if(changedbits & (1 << PIND5))
 318:	c5 ff       	sbrs	r28, 5
 31a:	16 c0       	rjmp	.+44     	; 0x348 <__vector_5+0x62>
	{
		counterA++;
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e8       	ldi	r20, 0x80	; 128
 322:	5f e3       	ldi	r21, 0x3F	; 63
 324:	60 91 18 01 	lds	r22, 0x0118
 328:	70 91 19 01 	lds	r23, 0x0119
 32c:	80 91 1a 01 	lds	r24, 0x011A
 330:	90 91 1b 01 	lds	r25, 0x011B
 334:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3>
 338:	60 93 18 01 	sts	0x0118, r22
 33c:	70 93 19 01 	sts	0x0119, r23
 340:	80 93 1a 01 	sts	0x011A, r24
 344:	90 93 1b 01 	sts	0x011B, r25
	}
	
	if(changedbits & (1 << PIND6))
 348:	c6 ff       	sbrs	r28, 6
 34a:	16 c0       	rjmp	.+44     	; 0x378 <__vector_5+0x92>
	{
		counterA++;
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e8       	ldi	r20, 0x80	; 128
 352:	5f e3       	ldi	r21, 0x3F	; 63
 354:	60 91 18 01 	lds	r22, 0x0118
 358:	70 91 19 01 	lds	r23, 0x0119
 35c:	80 91 1a 01 	lds	r24, 0x011A
 360:	90 91 1b 01 	lds	r25, 0x011B
 364:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3>
 368:	60 93 18 01 	sts	0x0118, r22
 36c:	70 93 19 01 	sts	0x0119, r23
 370:	80 93 1a 01 	sts	0x011A, r24
 374:	90 93 1b 01 	sts	0x011B, r25
	}
		
	if(changedbits & (1 << PIND4))
 378:	c4 ff       	sbrs	r28, 4
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <__vector_5+0xc2>
	{
		counterB++;
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	40 e8       	ldi	r20, 0x80	; 128
 382:	5f e3       	ldi	r21, 0x3F	; 63
 384:	60 91 14 01 	lds	r22, 0x0114
 388:	70 91 15 01 	lds	r23, 0x0115
 38c:	80 91 16 01 	lds	r24, 0x0116
 390:	90 91 17 01 	lds	r25, 0x0117
 394:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3>
 398:	60 93 14 01 	sts	0x0114, r22
 39c:	70 93 15 01 	sts	0x0115, r23
 3a0:	80 93 16 01 	sts	0x0116, r24
 3a4:	90 93 17 01 	sts	0x0117, r25
	}

	if(changedbits & (1 << PIND7))
 3a8:	cc 23       	and	r28, r28
 3aa:	b4 f4       	brge	.+44     	; 0x3d8 <__vector_5+0xf2>
	{
		counterB++;
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	40 e8       	ldi	r20, 0x80	; 128
 3b2:	5f e3       	ldi	r21, 0x3F	; 63
 3b4:	60 91 14 01 	lds	r22, 0x0114
 3b8:	70 91 15 01 	lds	r23, 0x0115
 3bc:	80 91 16 01 	lds	r24, 0x0116
 3c0:	90 91 17 01 	lds	r25, 0x0117
 3c4:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3>
 3c8:	60 93 14 01 	sts	0x0114, r22
 3cc:	70 93 15 01 	sts	0x0115, r23
 3d0:	80 93 16 01 	sts	0x0116, r24
 3d4:	90 93 17 01 	sts	0x0117, r25
	}
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	cf 91       	pop	r28
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <__vector_9>:

ISR(TIMER2_OVF_vect){
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	2f 93       	push	r18
 408:	3f 93       	push	r19
 40a:	4f 93       	push	r20
 40c:	5f 93       	push	r21
 40e:	6f 93       	push	r22
 410:	7f 93       	push	r23
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	af 93       	push	r26
 418:	bf 93       	push	r27
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
	TOG(PORTC,PORTC1);
 41e:	98 b1       	in	r25, 0x08	; 8
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	89 27       	eor	r24, r25
 424:	88 b9       	out	0x08, r24	; 8
	double t_cycle = 1024.0/F_CPU;
	double capture_time = (255.0 - TIMER2_T)*t_cycle;
	
	frequencyA = counterA/capture_time;//Compute frequency
 426:	21 e3       	ldi	r18, 0x31	; 49
 428:	32 e6       	ldi	r19, 0x62	; 98
 42a:	4f e9       	ldi	r20, 0x9F	; 159
 42c:	5b e3       	ldi	r21, 0x3B	; 59
 42e:	60 91 18 01 	lds	r22, 0x0118
 432:	70 91 19 01 	lds	r23, 0x0119
 436:	80 91 1a 01 	lds	r24, 0x011A
 43a:	90 91 1b 01 	lds	r25, 0x011B
 43e:	0e 94 3c 04 	call	0x878	; 0x878 <__divsf3>
 442:	60 93 10 01 	sts	0x0110, r22
 446:	70 93 11 01 	sts	0x0111, r23
 44a:	80 93 12 01 	sts	0x0112, r24
 44e:	90 93 13 01 	sts	0x0113, r25
	frequencyB = counterB/capture_time;
 452:	21 e3       	ldi	r18, 0x31	; 49
 454:	32 e6       	ldi	r19, 0x62	; 98
 456:	4f e9       	ldi	r20, 0x9F	; 159
 458:	5b e3       	ldi	r21, 0x3B	; 59
 45a:	60 91 14 01 	lds	r22, 0x0114
 45e:	70 91 15 01 	lds	r23, 0x0115
 462:	80 91 16 01 	lds	r24, 0x0116
 466:	90 91 17 01 	lds	r25, 0x0117
 46a:	0e 94 3c 04 	call	0x878	; 0x878 <__divsf3>
 46e:	60 93 0c 01 	sts	0x010C, r22
 472:	70 93 0d 01 	sts	0x010D, r23
 476:	80 93 0e 01 	sts	0x010E, r24
 47a:	90 93 0f 01 	sts	0x010F, r25
	
	TCNT2 = TIMER2_T; //Reset the timer to count from TIMER2_T to 255 ;
 47e:	80 ea       	ldi	r24, 0xA0	; 160
 480:	80 93 b2 00 	sts	0x00B2, r24
	
	//reset counter
	counterA = 0;
 484:	10 92 18 01 	sts	0x0118, r1
 488:	10 92 19 01 	sts	0x0119, r1
 48c:	10 92 1a 01 	sts	0x011A, r1
 490:	10 92 1b 01 	sts	0x011B, r1
	counterB = 0;
 494:	10 92 14 01 	sts	0x0114, r1
 498:	10 92 15 01 	sts	0x0115, r1
 49c:	10 92 16 01 	sts	0x0116, r1
 4a0:	10 92 17 01 	sts	0x0117, r1
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <GetFrequency>:

float GetFrequency(int sel)
{
	if(sel)
 4c6:	89 2b       	or	r24, r25
 4c8:	49 f0       	breq	.+18     	; 0x4dc <GetFrequency+0x16>
		return frequencyA;
 4ca:	60 91 10 01 	lds	r22, 0x0110
 4ce:	70 91 11 01 	lds	r23, 0x0111
 4d2:	80 91 12 01 	lds	r24, 0x0112
 4d6:	90 91 13 01 	lds	r25, 0x0113
 4da:	08 95       	ret
	else
		return frequencyB;
 4dc:	60 91 0c 01 	lds	r22, 0x010C
 4e0:	70 91 0d 01 	lds	r23, 0x010D
 4e4:	80 91 0e 01 	lds	r24, 0x010E
 4e8:	90 91 0f 01 	lds	r25, 0x010F
}
 4ec:	08 95       	ret

000004ee <ControlLoop>:

//wheel_freq is frequency AFTER the gear reduction
void ControlLoop(int wheel_freqA, int wheel_freqB)
{	
 4ee:	8f 92       	push	r8
 4f0:	9f 92       	push	r9
 4f2:	af 92       	push	r10
 4f4:	bf 92       	push	r11
 4f6:	cf 92       	push	r12
 4f8:	df 92       	push	r13
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	eb 01       	movw	r28, r22
	PWM_SetDutyCycleB((uint16_t) commandeB);
}

float CorrecteurPI(int commande, double frequency)
{
	float err_ = commande - frequency;
 504:	bc 01       	movw	r22, r24
 506:	99 0f       	add	r25, r25
 508:	88 0b       	sbc	r24, r24
 50a:	99 0b       	sbc	r25, r25
 50c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatsisf>
 510:	20 91 10 01 	lds	r18, 0x0110
 514:	30 91 11 01 	lds	r19, 0x0111
 518:	40 91 12 01 	lds	r20, 0x0112
 51c:	50 91 13 01 	lds	r21, 0x0113
 520:	0e 94 ca 03 	call	0x794	; 0x794 <__subsf3>
	err_ = err_*K; //Apply the correcter
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	40 ea       	ldi	r20, 0xA0	; 160
 52a:	50 e4       	ldi	r21, 0x40	; 64
 52c:	0e 94 9b 05 	call	0xb36	; 0xb36 <__mulsf3>
}

//wheel_freq is frequency AFTER the gear reduction
void ControlLoop(int wheel_freqA, int wheel_freqB)
{	
	float duty_cycleA = CorrecteurPI(wheel_freqA*REDUCTION, frequencyA)/RPM_MAX;
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	30 ec       	ldi	r19, 0xC0	; 192
 534:	4a ed       	ldi	r20, 0xDA	; 218
 536:	55 e4       	ldi	r21, 0x45	; 69
 538:	0e 94 3c 04 	call	0x878	; 0x878 <__divsf3>
 53c:	4b 01       	movw	r8, r22
 53e:	5c 01       	movw	r10, r24
	PWM_SetDutyCycleB((uint16_t) commandeB);
}

float CorrecteurPI(int commande, double frequency)
{
	float err_ = commande - frequency;
 540:	be 01       	movw	r22, r28
 542:	dd 0f       	add	r29, r29
 544:	88 0b       	sbc	r24, r24
 546:	99 0b       	sbc	r25, r25
 548:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatsisf>
 54c:	20 91 0c 01 	lds	r18, 0x010C
 550:	30 91 0d 01 	lds	r19, 0x010D
 554:	40 91 0e 01 	lds	r20, 0x010E
 558:	50 91 0f 01 	lds	r21, 0x010F
 55c:	0e 94 ca 03 	call	0x794	; 0x794 <__subsf3>
	err_ = err_*K; //Apply the correcter
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	40 ea       	ldi	r20, 0xA0	; 160
 566:	50 e4       	ldi	r21, 0x40	; 64
 568:	0e 94 9b 05 	call	0xb36	; 0xb36 <__mulsf3>

//wheel_freq is frequency AFTER the gear reduction
void ControlLoop(int wheel_freqA, int wheel_freqB)
{	
	float duty_cycleA = CorrecteurPI(wheel_freqA*REDUCTION, frequencyA)/RPM_MAX;
	float duty_cycleB = CorrecteurPI(wheel_freqB*REDUCTION, frequencyB)/RPM_MAX;
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 ec       	ldi	r19, 0xC0	; 192
 570:	4a ed       	ldi	r20, 0xDA	; 218
 572:	55 e4       	ldi	r21, 0x45	; 69
 574:	0e 94 3c 04 	call	0x878	; 0x878 <__divsf3>
 578:	6b 01       	movw	r12, r22
 57a:	7c 01       	movw	r14, r24
	
	if(duty_cycleA > 1) duty_cycleA = 1;
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e8       	ldi	r20, 0x80	; 128
 582:	5f e3       	ldi	r21, 0x3F	; 63
 584:	c5 01       	movw	r24, r10
 586:	b4 01       	movw	r22, r8
 588:	0e 94 96 05 	call	0xb2c	; 0xb2c <__gesf2>
 58c:	18 16       	cp	r1, r24
 58e:	6c f0       	brlt	.+26     	; 0x5aa <ControlLoop+0xbc>
	if(duty_cycleA < 0) duty_cycleA = 0;
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	a9 01       	movw	r20, r18
 596:	c5 01       	movw	r24, r10
 598:	b4 01       	movw	r22, r8
 59a:	0e 94 37 04 	call	0x86e	; 0x86e <__cmpsf2>
 59e:	88 23       	and	r24, r24
 5a0:	64 f4       	brge	.+24     	; 0x5ba <ControlLoop+0xcc>
 5a2:	81 2c       	mov	r8, r1
 5a4:	91 2c       	mov	r9, r1
 5a6:	54 01       	movw	r10, r8
 5a8:	08 c0       	rjmp	.+16     	; 0x5ba <ControlLoop+0xcc>
void ControlLoop(int wheel_freqA, int wheel_freqB)
{	
	float duty_cycleA = CorrecteurPI(wheel_freqA*REDUCTION, frequencyA)/RPM_MAX;
	float duty_cycleB = CorrecteurPI(wheel_freqB*REDUCTION, frequencyB)/RPM_MAX;
	
	if(duty_cycleA > 1) duty_cycleA = 1;
 5aa:	0f 2e       	mov	r0, r31
 5ac:	81 2c       	mov	r8, r1
 5ae:	91 2c       	mov	r9, r1
 5b0:	f0 e8       	ldi	r31, 0x80	; 128
 5b2:	af 2e       	mov	r10, r31
 5b4:	ff e3       	ldi	r31, 0x3F	; 63
 5b6:	bf 2e       	mov	r11, r31
 5b8:	f0 2d       	mov	r31, r0
	if(duty_cycleA < 0) duty_cycleA = 0;
	
	if(duty_cycleB > 1) duty_cycleB = 1;
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e8       	ldi	r20, 0x80	; 128
 5c0:	5f e3       	ldi	r21, 0x3F	; 63
 5c2:	c7 01       	movw	r24, r14
 5c4:	b6 01       	movw	r22, r12
 5c6:	0e 94 96 05 	call	0xb2c	; 0xb2c <__gesf2>
 5ca:	18 16       	cp	r1, r24
 5cc:	6c f0       	brlt	.+26     	; 0x5e8 <ControlLoop+0xfa>
	if(duty_cycleB < 0) duty_cycleB = 0;
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	a9 01       	movw	r20, r18
 5d4:	c7 01       	movw	r24, r14
 5d6:	b6 01       	movw	r22, r12
 5d8:	0e 94 37 04 	call	0x86e	; 0x86e <__cmpsf2>
 5dc:	88 23       	and	r24, r24
 5de:	64 f4       	brge	.+24     	; 0x5f8 <ControlLoop+0x10a>
 5e0:	c1 2c       	mov	r12, r1
 5e2:	d1 2c       	mov	r13, r1
 5e4:	76 01       	movw	r14, r12
 5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <ControlLoop+0x10a>
	float duty_cycleB = CorrecteurPI(wheel_freqB*REDUCTION, frequencyB)/RPM_MAX;
	
	if(duty_cycleA > 1) duty_cycleA = 1;
	if(duty_cycleA < 0) duty_cycleA = 0;
	
	if(duty_cycleB > 1) duty_cycleB = 1;
 5e8:	0f 2e       	mov	r0, r31
 5ea:	c1 2c       	mov	r12, r1
 5ec:	d1 2c       	mov	r13, r1
 5ee:	f0 e8       	ldi	r31, 0x80	; 128
 5f0:	ef 2e       	mov	r14, r31
 5f2:	ff e3       	ldi	r31, 0x3F	; 63
 5f4:	ff 2e       	mov	r15, r31
 5f6:	f0 2d       	mov	r31, r0
	if(duty_cycleB < 0) duty_cycleB = 0;
	
	int commandeA = (int) ICR1*duty_cycleA;
 5f8:	e6 e8       	ldi	r30, 0x86	; 134
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	60 81       	ld	r22, Z
 5fe:	71 81       	ldd	r23, Z+1	; 0x01
	int commandeB = (int) ICR1*duty_cycleB;
 600:	c0 81       	ld	r28, Z
 602:	d1 81       	ldd	r29, Z+1	; 0x01
	if(duty_cycleA < 0) duty_cycleA = 0;
	
	if(duty_cycleB > 1) duty_cycleB = 1;
	if(duty_cycleB < 0) duty_cycleB = 0;
	
	int commandeA = (int) ICR1*duty_cycleA;
 604:	07 2e       	mov	r0, r23
 606:	00 0c       	add	r0, r0
 608:	88 0b       	sbc	r24, r24
 60a:	99 0b       	sbc	r25, r25
 60c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatsisf>
 610:	a5 01       	movw	r20, r10
 612:	94 01       	movw	r18, r8
 614:	0e 94 9b 05 	call	0xb36	; 0xb36 <__mulsf3>
 618:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixsfsi>
	return err_;
}

void PWM_SetDutyCycleA(uint16_t duty_cycle)
{
	OCR1A = duty_cycle;
 61c:	70 93 89 00 	sts	0x0089, r23
 620:	60 93 88 00 	sts	0x0088, r22
	
	if(duty_cycleB > 1) duty_cycleB = 1;
	if(duty_cycleB < 0) duty_cycleB = 0;
	
	int commandeA = (int) ICR1*duty_cycleA;
	int commandeB = (int) ICR1*duty_cycleB;
 624:	be 01       	movw	r22, r28
 626:	dd 0f       	add	r29, r29
 628:	88 0b       	sbc	r24, r24
 62a:	99 0b       	sbc	r25, r25
 62c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatsisf>
 630:	a7 01       	movw	r20, r14
 632:	96 01       	movw	r18, r12
 634:	0e 94 9b 05 	call	0xb36	; 0xb36 <__mulsf3>
 638:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixsfsi>
	OCR1A = duty_cycle;
}

void PWM_SetDutyCycleB(uint16_t duty_cycle)
{
	OCR1B = duty_cycle;
 63c:	70 93 8b 00 	sts	0x008B, r23
 640:	60 93 8a 00 	sts	0x008A, r22
	int commandeA = (int) ICR1*duty_cycleA;
	int commandeB = (int) ICR1*duty_cycleB;
	
	PWM_SetDutyCycleA((uint16_t) commandeA);
	PWM_SetDutyCycleB((uint16_t) commandeB);
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	ff 90       	pop	r15
 64a:	ef 90       	pop	r14
 64c:	df 90       	pop	r13
 64e:	cf 90       	pop	r12
 650:	bf 90       	pop	r11
 652:	af 90       	pop	r10
 654:	9f 90       	pop	r9
 656:	8f 90       	pop	r8
 658:	08 95       	ret

0000065a <PWM_SetDutyCycleA>:
	return err_;
}

void PWM_SetDutyCycleA(uint16_t duty_cycle)
{
	OCR1A = duty_cycle;
 65a:	90 93 89 00 	sts	0x0089, r25
 65e:	80 93 88 00 	sts	0x0088, r24
 662:	08 95       	ret

00000664 <PWM_SetDutyCycleB>:
}

void PWM_SetDutyCycleB(uint16_t duty_cycle)
{
	OCR1B = duty_cycle;
 664:	90 93 8b 00 	sts	0x008B, r25
 668:	80 93 8a 00 	sts	0x008A, r24
 66c:	08 95       	ret

0000066e <PWM_SetTop>:
}

void PWM_SetTop(uint16_t TOP_val)
{
	ICR1 = TOP_val;
 66e:	90 93 87 00 	sts	0x0087, r25
 672:	80 93 86 00 	sts	0x0086, r24
 676:	08 95       	ret

00000678 <ondata>:
		TOG(PORTC,PORTC0);
	}
}

uint8_t ondata(uint8_t* data_recv, uint8_t s_data, uint8_t* data_transm)
{
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	fc 01       	movw	r30, r24
 67e:	ea 01       	movw	r28, r20
	if(s_data < 1) Err();
 680:	66 23       	and	r22, r22
 682:	09 f4       	brne	.+2      	; 0x686 <ondata+0xe>
 684:	45 c0       	rjmp	.+138    	; 0x710 <ondata+0x98>
	else
	{
		uint8_t cmd = data_recv[0];
	
		switch (cmd){
 686:	90 81       	ld	r25, Z
 688:	90 3f       	cpi	r25, 0xF0	; 240
 68a:	09 f1       	breq	.+66     	; 0x6ce <ondata+0x56>
 68c:	28 f4       	brcc	.+10     	; 0x698 <ondata+0x20>
 68e:	9a 31       	cpi	r25, 0x1A	; 26
 690:	41 f0       	breq	.+16     	; 0x6a2 <ondata+0x2a>
 692:	9b 31       	cpi	r25, 0x1B	; 27
 694:	89 f0       	breq	.+34     	; 0x6b8 <ondata+0x40>
 696:	3c c0       	rjmp	.+120    	; 0x710 <ondata+0x98>
 698:	91 3f       	cpi	r25, 0xF1	; 241
 69a:	21 f1       	breq	.+72     	; 0x6e4 <ondata+0x6c>
 69c:	92 3f       	cpi	r25, 0xF2	; 242
 69e:	61 f1       	breq	.+88     	; 0x6f8 <ondata+0x80>
 6a0:	37 c0       	rjmp	.+110    	; 0x710 <ondata+0x98>
			//Set Duty_cycle A, TOG PORTC1 when receive command
			case 0x1A:
				if(s_data < 3) Err();
 6a2:	63 30       	cpi	r22, 0x03	; 3
 6a4:	a8 f1       	brcs	.+106    	; 0x710 <ondata+0x98>
				else PWM_SetDutyCycleA(((uint16_t)data_recv[1] << 8) | data_recv[2]);//Convert two uint8_t in one uint16_t	
 6a6:	81 81       	ldd	r24, Z+1	; 0x01
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	98 2f       	mov	r25, r24
 6ac:	88 27       	eor	r24, r24
 6ae:	22 81       	ldd	r18, Z+2	; 0x02
 6b0:	82 2b       	or	r24, r18
 6b2:	0e 94 2d 03 	call	0x65a	; 0x65a <PWM_SetDutyCycleA>
 6b6:	2c c0       	rjmp	.+88     	; 0x710 <ondata+0x98>
				break;
				
			//Set Duty_cycle B
			case 0x1B:
				if(s_data < 3) Err();
 6b8:	63 30       	cpi	r22, 0x03	; 3
 6ba:	50 f1       	brcs	.+84     	; 0x710 <ondata+0x98>
				else PWM_SetDutyCycleB(((uint16_t)data_recv[1] << 8) | data_recv[2]);//Convert two uint8_t in one uint16_t
 6bc:	81 81       	ldd	r24, Z+1	; 0x01
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	98 2f       	mov	r25, r24
 6c2:	88 27       	eor	r24, r24
 6c4:	22 81       	ldd	r18, Z+2	; 0x02
 6c6:	82 2b       	or	r24, r18
 6c8:	0e 94 32 03 	call	0x664	; 0x664 <PWM_SetDutyCycleB>
 6cc:	21 c0       	rjmp	.+66     	; 0x710 <ondata+0x98>
				break;
			
			case 0xF0:
				if(s_data < 3) Err();
 6ce:	63 30       	cpi	r22, 0x03	; 3
 6d0:	f8 f0       	brcs	.+62     	; 0x710 <ondata+0x98>
				else PWM_SetTop(((uint16_t)data_recv[1] << 8) | data_recv[2]);//Convert two uint8_t in one uint16_t
 6d2:	81 81       	ldd	r24, Z+1	; 0x01
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	98 2f       	mov	r25, r24
 6d8:	88 27       	eor	r24, r24
 6da:	22 81       	ldd	r18, Z+2	; 0x02
 6dc:	82 2b       	or	r24, r18
 6de:	0e 94 37 03 	call	0x66e	; 0x66e <PWM_SetTop>
 6e2:	16 c0       	rjmp	.+44     	; 0x710 <ondata+0x98>
				break;
				
			case 0xF1:
				if(s_data < 3) Err();
 6e4:	63 30       	cpi	r22, 0x03	; 3
 6e6:	a0 f0       	brcs	.+40     	; 0x710 <ondata+0x98>
				else togAss = !togAss;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 91 1c 01 	lds	r25, 0x011C
 6ee:	91 11       	cpse	r25, r1
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	80 93 1c 01 	sts	0x011C, r24
 6f6:	0c c0       	rjmp	.+24     	; 0x710 <ondata+0x98>
				break;

			case 0xF2:
				if(s_data < 3) Err();
 6f8:	63 30       	cpi	r22, 0x03	; 3
 6fa:	50 f0       	brcs	.+20     	; 0x710 <ondata+0x98>
				else command = ((uint16_t)data_recv[1] << 8) | data_recv[2];//Convert two uint8_t in one uint16_t
 6fc:	81 81       	ldd	r24, Z+1	; 0x01
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	98 2f       	mov	r25, r24
 702:	88 27       	eor	r24, r24
 704:	22 81       	ldd	r18, Z+2	; 0x02
 706:	82 2b       	or	r24, r18
 708:	90 93 1e 01 	sts	0x011E, r25
 70c:	80 93 1d 01 	sts	0x011D, r24
			default:
				break;
		}
	}

	int motor_frequency = (int) GetFrequency(1);
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 63 02 	call	0x4c6	; 0x4c6 <GetFrequency>
 718:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixsfsi>
	uint8_t q = motor_frequency/255;
 71c:	cb 01       	movw	r24, r22
 71e:	6f ef       	ldi	r22, 0xFF	; 255
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	0e 94 08 06 	call	0xc10	; 0xc10 <__divmodhi4>
 726:	68 83       	st	Y, r22
	uint8_t r = motor_frequency%255;
 728:	89 83       	std	Y+1, r24	; 0x01
	
	//return the current frequency measure on T0, equal to 255*q + r
	data_transm[0] = q;
	data_transm[1] = r;
	return 2;
}
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <main>:
uint8_t ondata(uint8_t* data_recv, uint8_t s_data, uint8_t* data_transm);
void Err();

int main(void)
{
	sei();
 732:	78 94       	sei
	SET(DDRC,PORTC0); //Makes PORTC0 as Output
 734:	38 9a       	sbi	0x07, 0	; 7
	SET(DDRC,PORTC1);
 736:	39 9a       	sbi	0x07, 1	; 7
	
	//Test PWM
	PWM_Init(0x0FFF);
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	9f e0       	ldi	r25, 0x0F	; 15
 73c:	0e 94 3f 01 	call	0x27e	; 0x27e <PWM_Init>
	PWM_SetDutyCycleA(0x03FF);
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	93 e0       	ldi	r25, 0x03	; 3
 744:	0e 94 2d 03 	call	0x65a	; 0x65a <PWM_SetDutyCycleA>
	PWM_SetDutyCycleB(0x0BFF);
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	9b e0       	ldi	r25, 0x0B	; 11
 74c:	0e 94 32 03 	call	0x664	; 0x664 <PWM_SetDutyCycleB>
	
	//Test frequency meters
	Counter_INIT();
 750:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Counter_INIT>
	
	I2C_Init(0x12,5,ondata);
 754:	4c e3       	ldi	r20, 0x3C	; 60
 756:	53 e0       	ldi	r21, 0x03	; 3
 758:	65 e0       	ldi	r22, 0x05	; 5
 75a:	82 e1       	ldi	r24, 0x12	; 18
 75c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	while(1) //infinite loop
	{
		if(togAss) ControlLoop((int) command, (int) command);
		else _delay_ms(1000); //1 second delay
		
		TOG(PORTC,PORTC0);
 760:	c1 e0       	ldi	r28, 0x01	; 1
	Counter_INIT();
	
	I2C_Init(0x12,5,ondata);
	while(1) //infinite loop
	{
		if(togAss) ControlLoop((int) command, (int) command);
 762:	80 91 1c 01 	lds	r24, 0x011C
 766:	88 23       	and	r24, r24
 768:	41 f0       	breq	.+16     	; 0x77a <main+0x48>
 76a:	80 91 1d 01 	lds	r24, 0x011D
 76e:	90 91 1e 01 	lds	r25, 0x011E
 772:	bc 01       	movw	r22, r24
 774:	0e 94 77 02 	call	0x4ee	; 0x4ee <ControlLoop>
 778:	09 c0       	rjmp	.+18     	; 0x78c <main+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 77a:	2f ef       	ldi	r18, 0xFF	; 255
 77c:	88 e0       	ldi	r24, 0x08	; 8
 77e:	9d e3       	ldi	r25, 0x3D	; 61
 780:	21 50       	subi	r18, 0x01	; 1
 782:	80 40       	sbci	r24, 0x00	; 0
 784:	90 40       	sbci	r25, 0x00	; 0
 786:	e1 f7       	brne	.-8      	; 0x780 <main+0x4e>
 788:	00 c0       	rjmp	.+0      	; 0x78a <main+0x58>
 78a:	00 00       	nop
		else _delay_ms(1000); //1 second delay
		
		TOG(PORTC,PORTC0);
 78c:	88 b1       	in	r24, 0x08	; 8
 78e:	8c 27       	eor	r24, r28
 790:	88 b9       	out	0x08, r24	; 8
	}
 792:	e7 cf       	rjmp	.-50     	; 0x762 <main+0x30>

00000794 <__subsf3>:
 794:	50 58       	subi	r21, 0x80	; 128

00000796 <__addsf3>:
 796:	bb 27       	eor	r27, r27
 798:	aa 27       	eor	r26, r26
 79a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__addsf3x>
 79e:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
 7a2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
 7a6:	38 f0       	brcs	.+14     	; 0x7b6 <__addsf3+0x20>
 7a8:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__addsf3+0x20>
 7ae:	39 f4       	brne	.+14     	; 0x7be <__addsf3+0x28>
 7b0:	9f 3f       	cpi	r25, 0xFF	; 255
 7b2:	19 f4       	brne	.+6      	; 0x7ba <__addsf3+0x24>
 7b4:	26 f4       	brtc	.+8      	; 0x7be <__addsf3+0x28>
 7b6:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
 7ba:	0e f4       	brtc	.+2      	; 0x7be <__addsf3+0x28>
 7bc:	e0 95       	com	r30
 7be:	e7 fb       	bst	r30, 7
 7c0:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>

000007c4 <__addsf3x>:
 7c4:	e9 2f       	mov	r30, r25
 7c6:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
 7ca:	58 f3       	brcs	.-42     	; 0x7a2 <__addsf3+0xc>
 7cc:	ba 17       	cp	r27, r26
 7ce:	62 07       	cpc	r22, r18
 7d0:	73 07       	cpc	r23, r19
 7d2:	84 07       	cpc	r24, r20
 7d4:	95 07       	cpc	r25, r21
 7d6:	20 f0       	brcs	.+8      	; 0x7e0 <__addsf3x+0x1c>
 7d8:	79 f4       	brne	.+30     	; 0x7f8 <__addsf3x+0x34>
 7da:	a6 f5       	brtc	.+104    	; 0x844 <__addsf3x+0x80>
 7dc:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_zero>
 7e0:	0e f4       	brtc	.+2      	; 0x7e4 <__addsf3x+0x20>
 7e2:	e0 95       	com	r30
 7e4:	0b 2e       	mov	r0, r27
 7e6:	ba 2f       	mov	r27, r26
 7e8:	a0 2d       	mov	r26, r0
 7ea:	0b 01       	movw	r0, r22
 7ec:	b9 01       	movw	r22, r18
 7ee:	90 01       	movw	r18, r0
 7f0:	0c 01       	movw	r0, r24
 7f2:	ca 01       	movw	r24, r20
 7f4:	a0 01       	movw	r20, r0
 7f6:	11 24       	eor	r1, r1
 7f8:	ff 27       	eor	r31, r31
 7fa:	59 1b       	sub	r21, r25
 7fc:	99 f0       	breq	.+38     	; 0x824 <__addsf3x+0x60>
 7fe:	59 3f       	cpi	r21, 0xF9	; 249
 800:	50 f4       	brcc	.+20     	; 0x816 <__addsf3x+0x52>
 802:	50 3e       	cpi	r21, 0xE0	; 224
 804:	68 f1       	brcs	.+90     	; 0x860 <__addsf3x+0x9c>
 806:	1a 16       	cp	r1, r26
 808:	f0 40       	sbci	r31, 0x00	; 0
 80a:	a2 2f       	mov	r26, r18
 80c:	23 2f       	mov	r18, r19
 80e:	34 2f       	mov	r19, r20
 810:	44 27       	eor	r20, r20
 812:	58 5f       	subi	r21, 0xF8	; 248
 814:	f3 cf       	rjmp	.-26     	; 0x7fc <__addsf3x+0x38>
 816:	46 95       	lsr	r20
 818:	37 95       	ror	r19
 81a:	27 95       	ror	r18
 81c:	a7 95       	ror	r26
 81e:	f0 40       	sbci	r31, 0x00	; 0
 820:	53 95       	inc	r21
 822:	c9 f7       	brne	.-14     	; 0x816 <__addsf3x+0x52>
 824:	7e f4       	brtc	.+30     	; 0x844 <__addsf3x+0x80>
 826:	1f 16       	cp	r1, r31
 828:	ba 0b       	sbc	r27, r26
 82a:	62 0b       	sbc	r22, r18
 82c:	73 0b       	sbc	r23, r19
 82e:	84 0b       	sbc	r24, r20
 830:	ba f0       	brmi	.+46     	; 0x860 <__addsf3x+0x9c>
 832:	91 50       	subi	r25, 0x01	; 1
 834:	a1 f0       	breq	.+40     	; 0x85e <__addsf3x+0x9a>
 836:	ff 0f       	add	r31, r31
 838:	bb 1f       	adc	r27, r27
 83a:	66 1f       	adc	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	c2 f7       	brpl	.-16     	; 0x832 <__addsf3x+0x6e>
 842:	0e c0       	rjmp	.+28     	; 0x860 <__addsf3x+0x9c>
 844:	ba 0f       	add	r27, r26
 846:	62 1f       	adc	r22, r18
 848:	73 1f       	adc	r23, r19
 84a:	84 1f       	adc	r24, r20
 84c:	48 f4       	brcc	.+18     	; 0x860 <__addsf3x+0x9c>
 84e:	87 95       	ror	r24
 850:	77 95       	ror	r23
 852:	67 95       	ror	r22
 854:	b7 95       	ror	r27
 856:	f7 95       	ror	r31
 858:	9e 3f       	cpi	r25, 0xFE	; 254
 85a:	08 f0       	brcs	.+2      	; 0x85e <__addsf3x+0x9a>
 85c:	b0 cf       	rjmp	.-160    	; 0x7be <__addsf3+0x28>
 85e:	93 95       	inc	r25
 860:	88 0f       	add	r24, r24
 862:	08 f0       	brcs	.+2      	; 0x866 <__addsf3x+0xa2>
 864:	99 27       	eor	r25, r25
 866:	ee 0f       	add	r30, r30
 868:	97 95       	ror	r25
 86a:	87 95       	ror	r24
 86c:	08 95       	ret

0000086e <__cmpsf2>:
 86e:	0e 94 21 05 	call	0xa42	; 0xa42 <__fp_cmp>
 872:	08 f4       	brcc	.+2      	; 0x876 <__cmpsf2+0x8>
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	08 95       	ret

00000878 <__divsf3>:
 878:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divsf3x>
 87c:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
 880:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
 884:	58 f0       	brcs	.+22     	; 0x89c <__divsf3+0x24>
 886:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
 88a:	40 f0       	brcs	.+16     	; 0x89c <__divsf3+0x24>
 88c:	29 f4       	brne	.+10     	; 0x898 <__divsf3+0x20>
 88e:	5f 3f       	cpi	r21, 0xFF	; 255
 890:	29 f0       	breq	.+10     	; 0x89c <__divsf3+0x24>
 892:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>
 896:	51 11       	cpse	r21, r1
 898:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 89c:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>

000008a0 <__divsf3x>:
 8a0:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
 8a4:	68 f3       	brcs	.-38     	; 0x880 <__divsf3+0x8>

000008a6 <__divsf3_pse>:
 8a6:	99 23       	and	r25, r25
 8a8:	b1 f3       	breq	.-20     	; 0x896 <__divsf3+0x1e>
 8aa:	55 23       	and	r21, r21
 8ac:	91 f3       	breq	.-28     	; 0x892 <__divsf3+0x1a>
 8ae:	95 1b       	sub	r25, r21
 8b0:	55 0b       	sbc	r21, r21
 8b2:	bb 27       	eor	r27, r27
 8b4:	aa 27       	eor	r26, r26
 8b6:	62 17       	cp	r22, r18
 8b8:	73 07       	cpc	r23, r19
 8ba:	84 07       	cpc	r24, r20
 8bc:	38 f0       	brcs	.+14     	; 0x8cc <__divsf3_pse+0x26>
 8be:	9f 5f       	subi	r25, 0xFF	; 255
 8c0:	5f 4f       	sbci	r21, 0xFF	; 255
 8c2:	22 0f       	add	r18, r18
 8c4:	33 1f       	adc	r19, r19
 8c6:	44 1f       	adc	r20, r20
 8c8:	aa 1f       	adc	r26, r26
 8ca:	a9 f3       	breq	.-22     	; 0x8b6 <__divsf3_pse+0x10>
 8cc:	35 d0       	rcall	.+106    	; 0x938 <__stack+0x39>
 8ce:	0e 2e       	mov	r0, r30
 8d0:	3a f0       	brmi	.+14     	; 0x8e0 <__divsf3_pse+0x3a>
 8d2:	e0 e8       	ldi	r30, 0x80	; 128
 8d4:	32 d0       	rcall	.+100    	; 0x93a <__stack+0x3b>
 8d6:	91 50       	subi	r25, 0x01	; 1
 8d8:	50 40       	sbci	r21, 0x00	; 0
 8da:	e6 95       	lsr	r30
 8dc:	00 1c       	adc	r0, r0
 8de:	ca f7       	brpl	.-14     	; 0x8d2 <__divsf3_pse+0x2c>
 8e0:	2b d0       	rcall	.+86     	; 0x938 <__stack+0x39>
 8e2:	fe 2f       	mov	r31, r30
 8e4:	29 d0       	rcall	.+82     	; 0x938 <__stack+0x39>
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	bb 1f       	adc	r27, r27
 8ee:	26 17       	cp	r18, r22
 8f0:	37 07       	cpc	r19, r23
 8f2:	48 07       	cpc	r20, r24
 8f4:	ab 07       	cpc	r26, r27
 8f6:	b0 e8       	ldi	r27, 0x80	; 128
 8f8:	09 f0       	breq	.+2      	; 0x8fc <__divsf3_pse+0x56>
 8fa:	bb 0b       	sbc	r27, r27
 8fc:	80 2d       	mov	r24, r0
 8fe:	bf 01       	movw	r22, r30
 900:	ff 27       	eor	r31, r31
 902:	93 58       	subi	r25, 0x83	; 131
 904:	5f 4f       	sbci	r21, 0xFF	; 255
 906:	3a f0       	brmi	.+14     	; 0x916 <__stack+0x17>
 908:	9e 3f       	cpi	r25, 0xFE	; 254
 90a:	51 05       	cpc	r21, r1
 90c:	78 f0       	brcs	.+30     	; 0x92c <__stack+0x2d>
 90e:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>
 912:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 916:	5f 3f       	cpi	r21, 0xFF	; 255
 918:	e4 f3       	brlt	.-8      	; 0x912 <__stack+0x13>
 91a:	98 3e       	cpi	r25, 0xE8	; 232
 91c:	d4 f3       	brlt	.-12     	; 0x912 <__stack+0x13>
 91e:	86 95       	lsr	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	b7 95       	ror	r27
 926:	f7 95       	ror	r31
 928:	9f 5f       	subi	r25, 0xFF	; 255
 92a:	c9 f7       	brne	.-14     	; 0x91e <__stack+0x1f>
 92c:	88 0f       	add	r24, r24
 92e:	91 1d       	adc	r25, r1
 930:	96 95       	lsr	r25
 932:	87 95       	ror	r24
 934:	97 f9       	bld	r25, 7
 936:	08 95       	ret
 938:	e1 e0       	ldi	r30, 0x01	; 1
 93a:	66 0f       	add	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	88 1f       	adc	r24, r24
 940:	bb 1f       	adc	r27, r27
 942:	62 17       	cp	r22, r18
 944:	73 07       	cpc	r23, r19
 946:	84 07       	cpc	r24, r20
 948:	ba 07       	cpc	r27, r26
 94a:	20 f0       	brcs	.+8      	; 0x954 <__stack+0x55>
 94c:	62 1b       	sub	r22, r18
 94e:	73 0b       	sbc	r23, r19
 950:	84 0b       	sbc	r24, r20
 952:	ba 0b       	sbc	r27, r26
 954:	ee 1f       	adc	r30, r30
 956:	88 f7       	brcc	.-30     	; 0x93a <__stack+0x3b>
 958:	e0 95       	com	r30
 95a:	08 95       	ret

0000095c <__fixsfsi>:
 95c:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixunssfsi>
 960:	68 94       	set
 962:	b1 11       	cpse	r27, r1
 964:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 968:	08 95       	ret

0000096a <__fixunssfsi>:
 96a:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_splitA>
 96e:	88 f0       	brcs	.+34     	; 0x992 <__fixunssfsi+0x28>
 970:	9f 57       	subi	r25, 0x7F	; 127
 972:	98 f0       	brcs	.+38     	; 0x99a <__fixunssfsi+0x30>
 974:	b9 2f       	mov	r27, r25
 976:	99 27       	eor	r25, r25
 978:	b7 51       	subi	r27, 0x17	; 23
 97a:	b0 f0       	brcs	.+44     	; 0x9a8 <__fixunssfsi+0x3e>
 97c:	e1 f0       	breq	.+56     	; 0x9b6 <__fixunssfsi+0x4c>
 97e:	66 0f       	add	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	1a f0       	brmi	.+6      	; 0x98e <__fixunssfsi+0x24>
 988:	ba 95       	dec	r27
 98a:	c9 f7       	brne	.-14     	; 0x97e <__fixunssfsi+0x14>
 98c:	14 c0       	rjmp	.+40     	; 0x9b6 <__fixunssfsi+0x4c>
 98e:	b1 30       	cpi	r27, 0x01	; 1
 990:	91 f0       	breq	.+36     	; 0x9b6 <__fixunssfsi+0x4c>
 992:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_zero>
 996:	b1 e0       	ldi	r27, 0x01	; 1
 998:	08 95       	ret
 99a:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_zero>
 99e:	67 2f       	mov	r22, r23
 9a0:	78 2f       	mov	r23, r24
 9a2:	88 27       	eor	r24, r24
 9a4:	b8 5f       	subi	r27, 0xF8	; 248
 9a6:	39 f0       	breq	.+14     	; 0x9b6 <__fixunssfsi+0x4c>
 9a8:	b9 3f       	cpi	r27, 0xF9	; 249
 9aa:	cc f3       	brlt	.-14     	; 0x99e <__fixunssfsi+0x34>
 9ac:	86 95       	lsr	r24
 9ae:	77 95       	ror	r23
 9b0:	67 95       	ror	r22
 9b2:	b3 95       	inc	r27
 9b4:	d9 f7       	brne	.-10     	; 0x9ac <__fixunssfsi+0x42>
 9b6:	3e f4       	brtc	.+14     	; 0x9c6 <__fixunssfsi+0x5c>
 9b8:	90 95       	com	r25
 9ba:	80 95       	com	r24
 9bc:	70 95       	com	r23
 9be:	61 95       	neg	r22
 9c0:	7f 4f       	sbci	r23, 0xFF	; 255
 9c2:	8f 4f       	sbci	r24, 0xFF	; 255
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
 9c6:	08 95       	ret

000009c8 <__floatunsisf>:
 9c8:	e8 94       	clt
 9ca:	09 c0       	rjmp	.+18     	; 0x9de <__floatsisf+0x12>

000009cc <__floatsisf>:
 9cc:	97 fb       	bst	r25, 7
 9ce:	3e f4       	brtc	.+14     	; 0x9de <__floatsisf+0x12>
 9d0:	90 95       	com	r25
 9d2:	80 95       	com	r24
 9d4:	70 95       	com	r23
 9d6:	61 95       	neg	r22
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	8f 4f       	sbci	r24, 0xFF	; 255
 9dc:	9f 4f       	sbci	r25, 0xFF	; 255
 9de:	99 23       	and	r25, r25
 9e0:	a9 f0       	breq	.+42     	; 0xa0c <__floatsisf+0x40>
 9e2:	f9 2f       	mov	r31, r25
 9e4:	96 e9       	ldi	r25, 0x96	; 150
 9e6:	bb 27       	eor	r27, r27
 9e8:	93 95       	inc	r25
 9ea:	f6 95       	lsr	r31
 9ec:	87 95       	ror	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	b7 95       	ror	r27
 9f4:	f1 11       	cpse	r31, r1
 9f6:	f8 cf       	rjmp	.-16     	; 0x9e8 <__floatsisf+0x1c>
 9f8:	fa f4       	brpl	.+62     	; 0xa38 <__floatsisf+0x6c>
 9fa:	bb 0f       	add	r27, r27
 9fc:	11 f4       	brne	.+4      	; 0xa02 <__floatsisf+0x36>
 9fe:	60 ff       	sbrs	r22, 0
 a00:	1b c0       	rjmp	.+54     	; 0xa38 <__floatsisf+0x6c>
 a02:	6f 5f       	subi	r22, 0xFF	; 255
 a04:	7f 4f       	sbci	r23, 0xFF	; 255
 a06:	8f 4f       	sbci	r24, 0xFF	; 255
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	16 c0       	rjmp	.+44     	; 0xa38 <__floatsisf+0x6c>
 a0c:	88 23       	and	r24, r24
 a0e:	11 f0       	breq	.+4      	; 0xa14 <__floatsisf+0x48>
 a10:	96 e9       	ldi	r25, 0x96	; 150
 a12:	11 c0       	rjmp	.+34     	; 0xa36 <__floatsisf+0x6a>
 a14:	77 23       	and	r23, r23
 a16:	21 f0       	breq	.+8      	; 0xa20 <__floatsisf+0x54>
 a18:	9e e8       	ldi	r25, 0x8E	; 142
 a1a:	87 2f       	mov	r24, r23
 a1c:	76 2f       	mov	r23, r22
 a1e:	05 c0       	rjmp	.+10     	; 0xa2a <__floatsisf+0x5e>
 a20:	66 23       	and	r22, r22
 a22:	71 f0       	breq	.+28     	; 0xa40 <__floatsisf+0x74>
 a24:	96 e8       	ldi	r25, 0x86	; 134
 a26:	86 2f       	mov	r24, r22
 a28:	70 e0       	ldi	r23, 0x00	; 0
 a2a:	60 e0       	ldi	r22, 0x00	; 0
 a2c:	2a f0       	brmi	.+10     	; 0xa38 <__floatsisf+0x6c>
 a2e:	9a 95       	dec	r25
 a30:	66 0f       	add	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	88 1f       	adc	r24, r24
 a36:	da f7       	brpl	.-10     	; 0xa2e <__floatsisf+0x62>
 a38:	88 0f       	add	r24, r24
 a3a:	96 95       	lsr	r25
 a3c:	87 95       	ror	r24
 a3e:	97 f9       	bld	r25, 7
 a40:	08 95       	ret

00000a42 <__fp_cmp>:
 a42:	99 0f       	add	r25, r25
 a44:	00 08       	sbc	r0, r0
 a46:	55 0f       	add	r21, r21
 a48:	aa 0b       	sbc	r26, r26
 a4a:	e0 e8       	ldi	r30, 0x80	; 128
 a4c:	fe ef       	ldi	r31, 0xFE	; 254
 a4e:	16 16       	cp	r1, r22
 a50:	17 06       	cpc	r1, r23
 a52:	e8 07       	cpc	r30, r24
 a54:	f9 07       	cpc	r31, r25
 a56:	c0 f0       	brcs	.+48     	; 0xa88 <__fp_cmp+0x46>
 a58:	12 16       	cp	r1, r18
 a5a:	13 06       	cpc	r1, r19
 a5c:	e4 07       	cpc	r30, r20
 a5e:	f5 07       	cpc	r31, r21
 a60:	98 f0       	brcs	.+38     	; 0xa88 <__fp_cmp+0x46>
 a62:	62 1b       	sub	r22, r18
 a64:	73 0b       	sbc	r23, r19
 a66:	84 0b       	sbc	r24, r20
 a68:	95 0b       	sbc	r25, r21
 a6a:	39 f4       	brne	.+14     	; 0xa7a <__fp_cmp+0x38>
 a6c:	0a 26       	eor	r0, r26
 a6e:	61 f0       	breq	.+24     	; 0xa88 <__fp_cmp+0x46>
 a70:	23 2b       	or	r18, r19
 a72:	24 2b       	or	r18, r20
 a74:	25 2b       	or	r18, r21
 a76:	21 f4       	brne	.+8      	; 0xa80 <__fp_cmp+0x3e>
 a78:	08 95       	ret
 a7a:	0a 26       	eor	r0, r26
 a7c:	09 f4       	brne	.+2      	; 0xa80 <__fp_cmp+0x3e>
 a7e:	a1 40       	sbci	r26, 0x01	; 1
 a80:	a6 95       	lsr	r26
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	81 1d       	adc	r24, r1
 a86:	81 1d       	adc	r24, r1
 a88:	08 95       	ret

00000a8a <__fp_inf>:
 a8a:	97 f9       	bld	r25, 7
 a8c:	9f 67       	ori	r25, 0x7F	; 127
 a8e:	80 e8       	ldi	r24, 0x80	; 128
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	08 95       	ret

00000a96 <__fp_nan>:
 a96:	9f ef       	ldi	r25, 0xFF	; 255
 a98:	80 ec       	ldi	r24, 0xC0	; 192
 a9a:	08 95       	ret

00000a9c <__fp_pscA>:
 a9c:	00 24       	eor	r0, r0
 a9e:	0a 94       	dec	r0
 aa0:	16 16       	cp	r1, r22
 aa2:	17 06       	cpc	r1, r23
 aa4:	18 06       	cpc	r1, r24
 aa6:	09 06       	cpc	r0, r25
 aa8:	08 95       	ret

00000aaa <__fp_pscB>:
 aaa:	00 24       	eor	r0, r0
 aac:	0a 94       	dec	r0
 aae:	12 16       	cp	r1, r18
 ab0:	13 06       	cpc	r1, r19
 ab2:	14 06       	cpc	r1, r20
 ab4:	05 06       	cpc	r0, r21
 ab6:	08 95       	ret

00000ab8 <__fp_round>:
 ab8:	09 2e       	mov	r0, r25
 aba:	03 94       	inc	r0
 abc:	00 0c       	add	r0, r0
 abe:	11 f4       	brne	.+4      	; 0xac4 <__fp_round+0xc>
 ac0:	88 23       	and	r24, r24
 ac2:	52 f0       	brmi	.+20     	; 0xad8 <__fp_round+0x20>
 ac4:	bb 0f       	add	r27, r27
 ac6:	40 f4       	brcc	.+16     	; 0xad8 <__fp_round+0x20>
 ac8:	bf 2b       	or	r27, r31
 aca:	11 f4       	brne	.+4      	; 0xad0 <__fp_round+0x18>
 acc:	60 ff       	sbrs	r22, 0
 ace:	04 c0       	rjmp	.+8      	; 0xad8 <__fp_round+0x20>
 ad0:	6f 5f       	subi	r22, 0xFF	; 255
 ad2:	7f 4f       	sbci	r23, 0xFF	; 255
 ad4:	8f 4f       	sbci	r24, 0xFF	; 255
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	08 95       	ret

00000ada <__fp_split3>:
 ada:	57 fd       	sbrc	r21, 7
 adc:	90 58       	subi	r25, 0x80	; 128
 ade:	44 0f       	add	r20, r20
 ae0:	55 1f       	adc	r21, r21
 ae2:	59 f0       	breq	.+22     	; 0xafa <__fp_splitA+0x10>
 ae4:	5f 3f       	cpi	r21, 0xFF	; 255
 ae6:	71 f0       	breq	.+28     	; 0xb04 <__fp_splitA+0x1a>
 ae8:	47 95       	ror	r20

00000aea <__fp_splitA>:
 aea:	88 0f       	add	r24, r24
 aec:	97 fb       	bst	r25, 7
 aee:	99 1f       	adc	r25, r25
 af0:	61 f0       	breq	.+24     	; 0xb0a <__fp_splitA+0x20>
 af2:	9f 3f       	cpi	r25, 0xFF	; 255
 af4:	79 f0       	breq	.+30     	; 0xb14 <__fp_splitA+0x2a>
 af6:	87 95       	ror	r24
 af8:	08 95       	ret
 afa:	12 16       	cp	r1, r18
 afc:	13 06       	cpc	r1, r19
 afe:	14 06       	cpc	r1, r20
 b00:	55 1f       	adc	r21, r21
 b02:	f2 cf       	rjmp	.-28     	; 0xae8 <__fp_split3+0xe>
 b04:	46 95       	lsr	r20
 b06:	f1 df       	rcall	.-30     	; 0xaea <__fp_splitA>
 b08:	08 c0       	rjmp	.+16     	; 0xb1a <__fp_splitA+0x30>
 b0a:	16 16       	cp	r1, r22
 b0c:	17 06       	cpc	r1, r23
 b0e:	18 06       	cpc	r1, r24
 b10:	99 1f       	adc	r25, r25
 b12:	f1 cf       	rjmp	.-30     	; 0xaf6 <__fp_splitA+0xc>
 b14:	86 95       	lsr	r24
 b16:	71 05       	cpc	r23, r1
 b18:	61 05       	cpc	r22, r1
 b1a:	08 94       	sec
 b1c:	08 95       	ret

00000b1e <__fp_zero>:
 b1e:	e8 94       	clt

00000b20 <__fp_szero>:
 b20:	bb 27       	eor	r27, r27
 b22:	66 27       	eor	r22, r22
 b24:	77 27       	eor	r23, r23
 b26:	cb 01       	movw	r24, r22
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <__gesf2>:
 b2c:	0e 94 21 05 	call	0xa42	; 0xa42 <__fp_cmp>
 b30:	08 f4       	brcc	.+2      	; 0xb34 <__gesf2+0x8>
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	08 95       	ret

00000b36 <__mulsf3>:
 b36:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__mulsf3x>
 b3a:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
 b3e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
 b42:	38 f0       	brcs	.+14     	; 0xb52 <__mulsf3+0x1c>
 b44:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
 b48:	20 f0       	brcs	.+8      	; 0xb52 <__mulsf3+0x1c>
 b4a:	95 23       	and	r25, r21
 b4c:	11 f0       	breq	.+4      	; 0xb52 <__mulsf3+0x1c>
 b4e:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>
 b52:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
 b56:	11 24       	eor	r1, r1
 b58:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>

00000b5c <__mulsf3x>:
 b5c:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
 b60:	70 f3       	brcs	.-36     	; 0xb3e <__mulsf3+0x8>

00000b62 <__mulsf3_pse>:
 b62:	95 9f       	mul	r25, r21
 b64:	c1 f3       	breq	.-16     	; 0xb56 <__mulsf3+0x20>
 b66:	95 0f       	add	r25, r21
 b68:	50 e0       	ldi	r21, 0x00	; 0
 b6a:	55 1f       	adc	r21, r21
 b6c:	62 9f       	mul	r22, r18
 b6e:	f0 01       	movw	r30, r0
 b70:	72 9f       	mul	r23, r18
 b72:	bb 27       	eor	r27, r27
 b74:	f0 0d       	add	r31, r0
 b76:	b1 1d       	adc	r27, r1
 b78:	63 9f       	mul	r22, r19
 b7a:	aa 27       	eor	r26, r26
 b7c:	f0 0d       	add	r31, r0
 b7e:	b1 1d       	adc	r27, r1
 b80:	aa 1f       	adc	r26, r26
 b82:	64 9f       	mul	r22, r20
 b84:	66 27       	eor	r22, r22
 b86:	b0 0d       	add	r27, r0
 b88:	a1 1d       	adc	r26, r1
 b8a:	66 1f       	adc	r22, r22
 b8c:	82 9f       	mul	r24, r18
 b8e:	22 27       	eor	r18, r18
 b90:	b0 0d       	add	r27, r0
 b92:	a1 1d       	adc	r26, r1
 b94:	62 1f       	adc	r22, r18
 b96:	73 9f       	mul	r23, r19
 b98:	b0 0d       	add	r27, r0
 b9a:	a1 1d       	adc	r26, r1
 b9c:	62 1f       	adc	r22, r18
 b9e:	83 9f       	mul	r24, r19
 ba0:	a0 0d       	add	r26, r0
 ba2:	61 1d       	adc	r22, r1
 ba4:	22 1f       	adc	r18, r18
 ba6:	74 9f       	mul	r23, r20
 ba8:	33 27       	eor	r19, r19
 baa:	a0 0d       	add	r26, r0
 bac:	61 1d       	adc	r22, r1
 bae:	23 1f       	adc	r18, r19
 bb0:	84 9f       	mul	r24, r20
 bb2:	60 0d       	add	r22, r0
 bb4:	21 1d       	adc	r18, r1
 bb6:	82 2f       	mov	r24, r18
 bb8:	76 2f       	mov	r23, r22
 bba:	6a 2f       	mov	r22, r26
 bbc:	11 24       	eor	r1, r1
 bbe:	9f 57       	subi	r25, 0x7F	; 127
 bc0:	50 40       	sbci	r21, 0x00	; 0
 bc2:	9a f0       	brmi	.+38     	; 0xbea <__mulsf3_pse+0x88>
 bc4:	f1 f0       	breq	.+60     	; 0xc02 <__mulsf3_pse+0xa0>
 bc6:	88 23       	and	r24, r24
 bc8:	4a f0       	brmi	.+18     	; 0xbdc <__mulsf3_pse+0x7a>
 bca:	ee 0f       	add	r30, r30
 bcc:	ff 1f       	adc	r31, r31
 bce:	bb 1f       	adc	r27, r27
 bd0:	66 1f       	adc	r22, r22
 bd2:	77 1f       	adc	r23, r23
 bd4:	88 1f       	adc	r24, r24
 bd6:	91 50       	subi	r25, 0x01	; 1
 bd8:	50 40       	sbci	r21, 0x00	; 0
 bda:	a9 f7       	brne	.-22     	; 0xbc6 <__mulsf3_pse+0x64>
 bdc:	9e 3f       	cpi	r25, 0xFE	; 254
 bde:	51 05       	cpc	r21, r1
 be0:	80 f0       	brcs	.+32     	; 0xc02 <__mulsf3_pse+0xa0>
 be2:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>
 be6:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 bea:	5f 3f       	cpi	r21, 0xFF	; 255
 bec:	e4 f3       	brlt	.-8      	; 0xbe6 <__mulsf3_pse+0x84>
 bee:	98 3e       	cpi	r25, 0xE8	; 232
 bf0:	d4 f3       	brlt	.-12     	; 0xbe6 <__mulsf3_pse+0x84>
 bf2:	86 95       	lsr	r24
 bf4:	77 95       	ror	r23
 bf6:	67 95       	ror	r22
 bf8:	b7 95       	ror	r27
 bfa:	f7 95       	ror	r31
 bfc:	e7 95       	ror	r30
 bfe:	9f 5f       	subi	r25, 0xFF	; 255
 c00:	c1 f7       	brne	.-16     	; 0xbf2 <__mulsf3_pse+0x90>
 c02:	fe 2b       	or	r31, r30
 c04:	88 0f       	add	r24, r24
 c06:	91 1d       	adc	r25, r1
 c08:	96 95       	lsr	r25
 c0a:	87 95       	ror	r24
 c0c:	97 f9       	bld	r25, 7
 c0e:	08 95       	ret

00000c10 <__divmodhi4>:
 c10:	97 fb       	bst	r25, 7
 c12:	07 2e       	mov	r0, r23
 c14:	16 f4       	brtc	.+4      	; 0xc1a <__divmodhi4+0xa>
 c16:	00 94       	com	r0
 c18:	07 d0       	rcall	.+14     	; 0xc28 <__divmodhi4_neg1>
 c1a:	77 fd       	sbrc	r23, 7
 c1c:	09 d0       	rcall	.+18     	; 0xc30 <__divmodhi4_neg2>
 c1e:	0e 94 1c 06 	call	0xc38	; 0xc38 <__udivmodhi4>
 c22:	07 fc       	sbrc	r0, 7
 c24:	05 d0       	rcall	.+10     	; 0xc30 <__divmodhi4_neg2>
 c26:	3e f4       	brtc	.+14     	; 0xc36 <__divmodhi4_exit>

00000c28 <__divmodhi4_neg1>:
 c28:	90 95       	com	r25
 c2a:	81 95       	neg	r24
 c2c:	9f 4f       	sbci	r25, 0xFF	; 255
 c2e:	08 95       	ret

00000c30 <__divmodhi4_neg2>:
 c30:	70 95       	com	r23
 c32:	61 95       	neg	r22
 c34:	7f 4f       	sbci	r23, 0xFF	; 255

00000c36 <__divmodhi4_exit>:
 c36:	08 95       	ret

00000c38 <__udivmodhi4>:
 c38:	aa 1b       	sub	r26, r26
 c3a:	bb 1b       	sub	r27, r27
 c3c:	51 e1       	ldi	r21, 0x11	; 17
 c3e:	07 c0       	rjmp	.+14     	; 0xc4e <__udivmodhi4_ep>

00000c40 <__udivmodhi4_loop>:
 c40:	aa 1f       	adc	r26, r26
 c42:	bb 1f       	adc	r27, r27
 c44:	a6 17       	cp	r26, r22
 c46:	b7 07       	cpc	r27, r23
 c48:	10 f0       	brcs	.+4      	; 0xc4e <__udivmodhi4_ep>
 c4a:	a6 1b       	sub	r26, r22
 c4c:	b7 0b       	sbc	r27, r23

00000c4e <__udivmodhi4_ep>:
 c4e:	88 1f       	adc	r24, r24
 c50:	99 1f       	adc	r25, r25
 c52:	5a 95       	dec	r21
 c54:	a9 f7       	brne	.-22     	; 0xc40 <__udivmodhi4_loop>
 c56:	80 95       	com	r24
 c58:	90 95       	com	r25
 c5a:	bc 01       	movw	r22, r24
 c5c:	cd 01       	movw	r24, r26
 c5e:	08 95       	ret

00000c60 <calloc>:
 c60:	0f 93       	push	r16
 c62:	1f 93       	push	r17
 c64:	cf 93       	push	r28
 c66:	df 93       	push	r29
 c68:	86 9f       	mul	r24, r22
 c6a:	80 01       	movw	r16, r0
 c6c:	87 9f       	mul	r24, r23
 c6e:	10 0d       	add	r17, r0
 c70:	96 9f       	mul	r25, r22
 c72:	10 0d       	add	r17, r0
 c74:	11 24       	eor	r1, r1
 c76:	c8 01       	movw	r24, r16
 c78:	0e 94 4c 06 	call	0xc98	; 0xc98 <malloc>
 c7c:	ec 01       	movw	r28, r24
 c7e:	00 97       	sbiw	r24, 0x00	; 0
 c80:	29 f0       	breq	.+10     	; 0xc8c <calloc+0x2c>
 c82:	a8 01       	movw	r20, r16
 c84:	60 e0       	ldi	r22, 0x00	; 0
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	0e 94 79 07 	call	0xef2	; 0xef2 <memset>
 c8c:	ce 01       	movw	r24, r28
 c8e:	df 91       	pop	r29
 c90:	cf 91       	pop	r28
 c92:	1f 91       	pop	r17
 c94:	0f 91       	pop	r16
 c96:	08 95       	ret

00000c98 <malloc>:
 c98:	cf 93       	push	r28
 c9a:	df 93       	push	r29
 c9c:	82 30       	cpi	r24, 0x02	; 2
 c9e:	91 05       	cpc	r25, r1
 ca0:	10 f4       	brcc	.+4      	; 0xca6 <malloc+0xe>
 ca2:	82 e0       	ldi	r24, 0x02	; 2
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	e0 91 27 01 	lds	r30, 0x0127
 caa:	f0 91 28 01 	lds	r31, 0x0128
 cae:	20 e0       	ldi	r18, 0x00	; 0
 cb0:	30 e0       	ldi	r19, 0x00	; 0
 cb2:	c0 e0       	ldi	r28, 0x00	; 0
 cb4:	d0 e0       	ldi	r29, 0x00	; 0
 cb6:	30 97       	sbiw	r30, 0x00	; 0
 cb8:	11 f1       	breq	.+68     	; 0xcfe <malloc+0x66>
 cba:	40 81       	ld	r20, Z
 cbc:	51 81       	ldd	r21, Z+1	; 0x01
 cbe:	48 17       	cp	r20, r24
 cc0:	59 07       	cpc	r21, r25
 cc2:	c0 f0       	brcs	.+48     	; 0xcf4 <malloc+0x5c>
 cc4:	48 17       	cp	r20, r24
 cc6:	59 07       	cpc	r21, r25
 cc8:	61 f4       	brne	.+24     	; 0xce2 <malloc+0x4a>
 cca:	82 81       	ldd	r24, Z+2	; 0x02
 ccc:	93 81       	ldd	r25, Z+3	; 0x03
 cce:	20 97       	sbiw	r28, 0x00	; 0
 cd0:	19 f0       	breq	.+6      	; 0xcd8 <malloc+0x40>
 cd2:	9b 83       	std	Y+3, r25	; 0x03
 cd4:	8a 83       	std	Y+2, r24	; 0x02
 cd6:	2b c0       	rjmp	.+86     	; 0xd2e <malloc+0x96>
 cd8:	90 93 28 01 	sts	0x0128, r25
 cdc:	80 93 27 01 	sts	0x0127, r24
 ce0:	26 c0       	rjmp	.+76     	; 0xd2e <malloc+0x96>
 ce2:	21 15       	cp	r18, r1
 ce4:	31 05       	cpc	r19, r1
 ce6:	19 f0       	breq	.+6      	; 0xcee <malloc+0x56>
 ce8:	42 17       	cp	r20, r18
 cea:	53 07       	cpc	r21, r19
 cec:	18 f4       	brcc	.+6      	; 0xcf4 <malloc+0x5c>
 cee:	9a 01       	movw	r18, r20
 cf0:	be 01       	movw	r22, r28
 cf2:	df 01       	movw	r26, r30
 cf4:	ef 01       	movw	r28, r30
 cf6:	02 80       	ldd	r0, Z+2	; 0x02
 cf8:	f3 81       	ldd	r31, Z+3	; 0x03
 cfa:	e0 2d       	mov	r30, r0
 cfc:	dc cf       	rjmp	.-72     	; 0xcb6 <malloc+0x1e>
 cfe:	21 15       	cp	r18, r1
 d00:	31 05       	cpc	r19, r1
 d02:	09 f1       	breq	.+66     	; 0xd46 <malloc+0xae>
 d04:	28 1b       	sub	r18, r24
 d06:	39 0b       	sbc	r19, r25
 d08:	24 30       	cpi	r18, 0x04	; 4
 d0a:	31 05       	cpc	r19, r1
 d0c:	90 f4       	brcc	.+36     	; 0xd32 <malloc+0x9a>
 d0e:	12 96       	adiw	r26, 0x02	; 2
 d10:	8d 91       	ld	r24, X+
 d12:	9c 91       	ld	r25, X
 d14:	13 97       	sbiw	r26, 0x03	; 3
 d16:	61 15       	cp	r22, r1
 d18:	71 05       	cpc	r23, r1
 d1a:	21 f0       	breq	.+8      	; 0xd24 <malloc+0x8c>
 d1c:	fb 01       	movw	r30, r22
 d1e:	93 83       	std	Z+3, r25	; 0x03
 d20:	82 83       	std	Z+2, r24	; 0x02
 d22:	04 c0       	rjmp	.+8      	; 0xd2c <malloc+0x94>
 d24:	90 93 28 01 	sts	0x0128, r25
 d28:	80 93 27 01 	sts	0x0127, r24
 d2c:	fd 01       	movw	r30, r26
 d2e:	32 96       	adiw	r30, 0x02	; 2
 d30:	44 c0       	rjmp	.+136    	; 0xdba <malloc+0x122>
 d32:	fd 01       	movw	r30, r26
 d34:	e2 0f       	add	r30, r18
 d36:	f3 1f       	adc	r31, r19
 d38:	81 93       	st	Z+, r24
 d3a:	91 93       	st	Z+, r25
 d3c:	22 50       	subi	r18, 0x02	; 2
 d3e:	31 09       	sbc	r19, r1
 d40:	2d 93       	st	X+, r18
 d42:	3c 93       	st	X, r19
 d44:	3a c0       	rjmp	.+116    	; 0xdba <malloc+0x122>
 d46:	20 91 25 01 	lds	r18, 0x0125
 d4a:	30 91 26 01 	lds	r19, 0x0126
 d4e:	23 2b       	or	r18, r19
 d50:	41 f4       	brne	.+16     	; 0xd62 <malloc+0xca>
 d52:	20 91 02 01 	lds	r18, 0x0102
 d56:	30 91 03 01 	lds	r19, 0x0103
 d5a:	30 93 26 01 	sts	0x0126, r19
 d5e:	20 93 25 01 	sts	0x0125, r18
 d62:	20 91 00 01 	lds	r18, 0x0100
 d66:	30 91 01 01 	lds	r19, 0x0101
 d6a:	21 15       	cp	r18, r1
 d6c:	31 05       	cpc	r19, r1
 d6e:	41 f4       	brne	.+16     	; 0xd80 <malloc+0xe8>
 d70:	2d b7       	in	r18, 0x3d	; 61
 d72:	3e b7       	in	r19, 0x3e	; 62
 d74:	40 91 04 01 	lds	r20, 0x0104
 d78:	50 91 05 01 	lds	r21, 0x0105
 d7c:	24 1b       	sub	r18, r20
 d7e:	35 0b       	sbc	r19, r21
 d80:	e0 91 25 01 	lds	r30, 0x0125
 d84:	f0 91 26 01 	lds	r31, 0x0126
 d88:	e2 17       	cp	r30, r18
 d8a:	f3 07       	cpc	r31, r19
 d8c:	a0 f4       	brcc	.+40     	; 0xdb6 <malloc+0x11e>
 d8e:	2e 1b       	sub	r18, r30
 d90:	3f 0b       	sbc	r19, r31
 d92:	28 17       	cp	r18, r24
 d94:	39 07       	cpc	r19, r25
 d96:	78 f0       	brcs	.+30     	; 0xdb6 <malloc+0x11e>
 d98:	ac 01       	movw	r20, r24
 d9a:	4e 5f       	subi	r20, 0xFE	; 254
 d9c:	5f 4f       	sbci	r21, 0xFF	; 255
 d9e:	24 17       	cp	r18, r20
 da0:	35 07       	cpc	r19, r21
 da2:	48 f0       	brcs	.+18     	; 0xdb6 <malloc+0x11e>
 da4:	4e 0f       	add	r20, r30
 da6:	5f 1f       	adc	r21, r31
 da8:	50 93 26 01 	sts	0x0126, r21
 dac:	40 93 25 01 	sts	0x0125, r20
 db0:	81 93       	st	Z+, r24
 db2:	91 93       	st	Z+, r25
 db4:	02 c0       	rjmp	.+4      	; 0xdba <malloc+0x122>
 db6:	e0 e0       	ldi	r30, 0x00	; 0
 db8:	f0 e0       	ldi	r31, 0x00	; 0
 dba:	cf 01       	movw	r24, r30
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	08 95       	ret

00000dc2 <free>:
 dc2:	0f 93       	push	r16
 dc4:	1f 93       	push	r17
 dc6:	cf 93       	push	r28
 dc8:	df 93       	push	r29
 dca:	00 97       	sbiw	r24, 0x00	; 0
 dcc:	09 f4       	brne	.+2      	; 0xdd0 <free+0xe>
 dce:	8c c0       	rjmp	.+280    	; 0xee8 <free+0x126>
 dd0:	fc 01       	movw	r30, r24
 dd2:	32 97       	sbiw	r30, 0x02	; 2
 dd4:	13 82       	std	Z+3, r1	; 0x03
 dd6:	12 82       	std	Z+2, r1	; 0x02
 dd8:	00 91 27 01 	lds	r16, 0x0127
 ddc:	10 91 28 01 	lds	r17, 0x0128
 de0:	01 15       	cp	r16, r1
 de2:	11 05       	cpc	r17, r1
 de4:	81 f4       	brne	.+32     	; 0xe06 <free+0x44>
 de6:	20 81       	ld	r18, Z
 de8:	31 81       	ldd	r19, Z+1	; 0x01
 dea:	82 0f       	add	r24, r18
 dec:	93 1f       	adc	r25, r19
 dee:	20 91 25 01 	lds	r18, 0x0125
 df2:	30 91 26 01 	lds	r19, 0x0126
 df6:	28 17       	cp	r18, r24
 df8:	39 07       	cpc	r19, r25
 dfa:	79 f5       	brne	.+94     	; 0xe5a <free+0x98>
 dfc:	f0 93 26 01 	sts	0x0126, r31
 e00:	e0 93 25 01 	sts	0x0125, r30
 e04:	71 c0       	rjmp	.+226    	; 0xee8 <free+0x126>
 e06:	d8 01       	movw	r26, r16
 e08:	40 e0       	ldi	r20, 0x00	; 0
 e0a:	50 e0       	ldi	r21, 0x00	; 0
 e0c:	ae 17       	cp	r26, r30
 e0e:	bf 07       	cpc	r27, r31
 e10:	50 f4       	brcc	.+20     	; 0xe26 <free+0x64>
 e12:	12 96       	adiw	r26, 0x02	; 2
 e14:	2d 91       	ld	r18, X+
 e16:	3c 91       	ld	r19, X
 e18:	13 97       	sbiw	r26, 0x03	; 3
 e1a:	ad 01       	movw	r20, r26
 e1c:	21 15       	cp	r18, r1
 e1e:	31 05       	cpc	r19, r1
 e20:	09 f1       	breq	.+66     	; 0xe64 <free+0xa2>
 e22:	d9 01       	movw	r26, r18
 e24:	f3 cf       	rjmp	.-26     	; 0xe0c <free+0x4a>
 e26:	9d 01       	movw	r18, r26
 e28:	da 01       	movw	r26, r20
 e2a:	33 83       	std	Z+3, r19	; 0x03
 e2c:	22 83       	std	Z+2, r18	; 0x02
 e2e:	60 81       	ld	r22, Z
 e30:	71 81       	ldd	r23, Z+1	; 0x01
 e32:	86 0f       	add	r24, r22
 e34:	97 1f       	adc	r25, r23
 e36:	82 17       	cp	r24, r18
 e38:	93 07       	cpc	r25, r19
 e3a:	69 f4       	brne	.+26     	; 0xe56 <free+0x94>
 e3c:	ec 01       	movw	r28, r24
 e3e:	28 81       	ld	r18, Y
 e40:	39 81       	ldd	r19, Y+1	; 0x01
 e42:	26 0f       	add	r18, r22
 e44:	37 1f       	adc	r19, r23
 e46:	2e 5f       	subi	r18, 0xFE	; 254
 e48:	3f 4f       	sbci	r19, 0xFF	; 255
 e4a:	31 83       	std	Z+1, r19	; 0x01
 e4c:	20 83       	st	Z, r18
 e4e:	8a 81       	ldd	r24, Y+2	; 0x02
 e50:	9b 81       	ldd	r25, Y+3	; 0x03
 e52:	93 83       	std	Z+3, r25	; 0x03
 e54:	82 83       	std	Z+2, r24	; 0x02
 e56:	45 2b       	or	r20, r21
 e58:	29 f4       	brne	.+10     	; 0xe64 <free+0xa2>
 e5a:	f0 93 28 01 	sts	0x0128, r31
 e5e:	e0 93 27 01 	sts	0x0127, r30
 e62:	42 c0       	rjmp	.+132    	; 0xee8 <free+0x126>
 e64:	13 96       	adiw	r26, 0x03	; 3
 e66:	fc 93       	st	X, r31
 e68:	ee 93       	st	-X, r30
 e6a:	12 97       	sbiw	r26, 0x02	; 2
 e6c:	ed 01       	movw	r28, r26
 e6e:	49 91       	ld	r20, Y+
 e70:	59 91       	ld	r21, Y+
 e72:	9e 01       	movw	r18, r28
 e74:	24 0f       	add	r18, r20
 e76:	35 1f       	adc	r19, r21
 e78:	e2 17       	cp	r30, r18
 e7a:	f3 07       	cpc	r31, r19
 e7c:	71 f4       	brne	.+28     	; 0xe9a <free+0xd8>
 e7e:	80 81       	ld	r24, Z
 e80:	91 81       	ldd	r25, Z+1	; 0x01
 e82:	84 0f       	add	r24, r20
 e84:	95 1f       	adc	r25, r21
 e86:	02 96       	adiw	r24, 0x02	; 2
 e88:	11 96       	adiw	r26, 0x01	; 1
 e8a:	9c 93       	st	X, r25
 e8c:	8e 93       	st	-X, r24
 e8e:	82 81       	ldd	r24, Z+2	; 0x02
 e90:	93 81       	ldd	r25, Z+3	; 0x03
 e92:	13 96       	adiw	r26, 0x03	; 3
 e94:	9c 93       	st	X, r25
 e96:	8e 93       	st	-X, r24
 e98:	12 97       	sbiw	r26, 0x02	; 2
 e9a:	e0 e0       	ldi	r30, 0x00	; 0
 e9c:	f0 e0       	ldi	r31, 0x00	; 0
 e9e:	d8 01       	movw	r26, r16
 ea0:	12 96       	adiw	r26, 0x02	; 2
 ea2:	8d 91       	ld	r24, X+
 ea4:	9c 91       	ld	r25, X
 ea6:	13 97       	sbiw	r26, 0x03	; 3
 ea8:	00 97       	sbiw	r24, 0x00	; 0
 eaa:	19 f0       	breq	.+6      	; 0xeb2 <free+0xf0>
 eac:	f8 01       	movw	r30, r16
 eae:	8c 01       	movw	r16, r24
 eb0:	f6 cf       	rjmp	.-20     	; 0xe9e <free+0xdc>
 eb2:	8d 91       	ld	r24, X+
 eb4:	9c 91       	ld	r25, X
 eb6:	98 01       	movw	r18, r16
 eb8:	2e 5f       	subi	r18, 0xFE	; 254
 eba:	3f 4f       	sbci	r19, 0xFF	; 255
 ebc:	82 0f       	add	r24, r18
 ebe:	93 1f       	adc	r25, r19
 ec0:	20 91 25 01 	lds	r18, 0x0125
 ec4:	30 91 26 01 	lds	r19, 0x0126
 ec8:	28 17       	cp	r18, r24
 eca:	39 07       	cpc	r19, r25
 ecc:	69 f4       	brne	.+26     	; 0xee8 <free+0x126>
 ece:	30 97       	sbiw	r30, 0x00	; 0
 ed0:	29 f4       	brne	.+10     	; 0xedc <free+0x11a>
 ed2:	10 92 28 01 	sts	0x0128, r1
 ed6:	10 92 27 01 	sts	0x0127, r1
 eda:	02 c0       	rjmp	.+4      	; 0xee0 <free+0x11e>
 edc:	13 82       	std	Z+3, r1	; 0x03
 ede:	12 82       	std	Z+2, r1	; 0x02
 ee0:	10 93 26 01 	sts	0x0126, r17
 ee4:	00 93 25 01 	sts	0x0125, r16
 ee8:	df 91       	pop	r29
 eea:	cf 91       	pop	r28
 eec:	1f 91       	pop	r17
 eee:	0f 91       	pop	r16
 ef0:	08 95       	ret

00000ef2 <memset>:
 ef2:	dc 01       	movw	r26, r24
 ef4:	01 c0       	rjmp	.+2      	; 0xef8 <memset+0x6>
 ef6:	6d 93       	st	X+, r22
 ef8:	41 50       	subi	r20, 0x01	; 1
 efa:	50 40       	sbci	r21, 0x00	; 0
 efc:	e0 f7       	brcc	.-8      	; 0xef6 <memset+0x4>
 efe:	08 95       	ret

00000f00 <_exit>:
 f00:	f8 94       	cli

00000f02 <__stop_program>:
 f02:	ff cf       	rjmp	.-2      	; 0xf02 <__stop_program>
